import {
  core.list {append, length, reverse},
  core.list.eq,
  core.text {pack, unpack},
  this.move.check {check},
  this.move.gen.float {float-gen},
  this.move.gen.int {int-gen},
  this.move.gen.list {list-gen},
  this.move.gen.one-of {one-of},
  this.move.gen.pair {pair-gen},
  this.move.gen.rune {rune-gen},
  this.move.gen.text {ascii-text-gen, text-gen},
  this.move.make-noa-kit {make-default-noa-kit, make-verbose-noa-kit},
}

define _find-int(i: int, xs: list(int)): bool {
  match xs {
  | Nil =>
    False
  | Cons(x, xs) =>
    if eq-int(x, i) {
      True
    } else {
      _find-int(i, xs)
    }
  }
}

define _find-float(i: float, xs: list(float)): bool {
  match xs {
  | Nil =>
    False
  | Cons(x, xs) =>
    if gt-float(x, i) {
      True
    } else {
      _find-float(i, xs)
    }
  }
}

define zen(): unit {
  pin k = make-default-noa-kit() in
  check(
    k,
    "unpack then pack is identity",
    text-gen,
    function (t) {
      pin t = t in
      pin xs = unpack(t) in
      pin t' = pack(xs) in
      eq-text(t, t')
    },
  );
  check(
    k,
    "(length as text) == (length as list of chars)",
    text-gen,
    function (t) {
      pin t = t in
      pin xs = unpack(t) in
      let len1 = core.text.length(t) in
      let len2 = length(xs) in
      eq-int(len1, len2)
    },
  );
  check(
    k,
    "reverse(ys) ++ reverse(xs) == reverse(xs ++ ys)",
    pair-gen(list-gen(rune-gen), list-gen(rune-gen)),
    function (p) {
      let Pair(!xs, !ys) = p in
      let left = append(reverse(!ys), reverse(!xs)) in
      let right = reverse(append(!xs, !ys)) in
      let Eq of {equal} = core.list.eq.as-eq(core.rune.eq.as-eq) in
      equal(left, right)
    },
  );
  pin xs = [1, 2, 3] in
  pin x = 4 in
  check(
    k,
    "one-of (should fail)",
    one-of(int-gen, xs, x),
    function (x) {
      let b1 = eq-int(x, 1) in
      let b2 = eq-int(x, 3) in
      let b3 = eq-int(x, 3) in
      or(b1, or(b2, b3))
    },
  );
  check(
    k,
    "shrinking texts (should fail)",
    text-gen,
    function (t) {
      let len on t = core.text.length(t) in
      let _ = t in
      lt-int(len, 10)
    },
  );
  pin k = make-verbose-noa-kit() in
  check(
    k,
    "there is no list that contains 15 (should fail and report [15])",
    list-gen(int-gen),
    function (xs) {
      not(_find-int(15, xs))
    },
  );
  check(
    k,
    "there is no list that contains a value bigger than 15 (should fail and report [15.XXXXXX])",
    list-gen(float-gen),
    function (xs) {
      not(_find-float(15, xs))
    },
  );
  check(
    k,
    "ascii",
    ascii-text-gen,
    function (_) {
      True
    },
  );
  Unit
}

define main(): unit {
  zen()
}
