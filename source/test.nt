import {
  core.list.eq,
  core.text {pack, unpack},
  this.gen {one-of},
  this.gen.floats {floats},
  this.gen.ints {ints},
  this.gen.lists {lists},
  this.gen.pairs {pairs},
  this.gen.runes {runes},
  this.gen.texts {texts},
  this.suite {noa, noa-verbose},
}

define _find-int(i: int, xs: list(int)): bool {
  match xs {
  | Nil =>
    False
  | Cons(x, xs) =>
    if eq-int(x, i) {
      True
    } else {
      _find-int(i, xs)
    }
  }
}

define _find-float(i: float, xs: list(float)): bool {
  match xs {
  | Nil =>
    False
  | Cons(x, xs) =>
    if gt-float(x, i) {
      True
    } else {
      _find-float(i, xs)
    }
  }
}

define zen(): unit {
  noa::check(
    "unpack then pack is identity",
    texts,
    function (t) {
      pin t = t in
      pin xs = unpack(t) in
      pin t' = pack(xs) in
      eq-text(t, t')
    },
  );
  noa::check(
    "(length as text) == (length as list of chars)",
    texts,
    function (t) {
      pin t = t in
      pin xs = unpack(t) in
      let len1 = core.text.length(t) in
      let len2 = length(xs) in
      eq-int(len1, len2)
    },
  );
  noa::check(
    "reverse(ys) ++ reverse(xs) == reverse(xs ++ ys)",
    pairs(lists(runes), lists(runes)),
    function (p) {
      let Pair(!xs, !ys) = p in
      let left = append(reverse(!ys), reverse(!xs)) in
      let right = reverse(append(!xs, !ys)) in
      let eq = core.list.eq.as-eq(core.rune.eq.as-eq) in
      eq::equal(left, right)
    },
  );
  let xs = [1, 2, 3] in
  let _ on xs =
    noa::check(
      "one-of (should fail)",
      one-of(ints, xs),
      function (x) {
        let b1 = eq-int(x, 1) in
        let b2 = eq-int(x, 3) in
        let b3 = eq-int(x, 3) in
        or(b1, or(b2, b3))
      },
    )
  in
  let _ = xs in
  noa::check(
    "shrinking texts (should fail)",
    texts,
    function (t) {
      let len on t = core.text.length(t) in
      let _ = t in
      lt-int(len, 10)
    },
  );
  // use `noa-verbose` instead of `noa` to get more detailed outputs
  noa-verbose::check(
    "there is no list that contains 15 (should fail and report [15])",
    lists(ints),
    function (xs) {
      not(_find-int(15, xs))
    },
  );
  noa-verbose::check(
    "there is no list that contains a value bigger than 15 (should fail and report [15.XXXXXX])",
    lists(floats),
    function (xs) {
      not(_find-float(15, xs))
    },
  );
}

define main(): unit {
  zen()
}
