import {
  core.either.show {as-show},
  core.list {nth},
  core.random {random-in-range},
  core.show {show},
  core.unit.show,
}

constant sample-size: type {
  int
}

data gen(a) {
| Gen(
    generate: (sample-size) -> a,
    shrink: (a) -> list(a),
    viewer: show(a),
  )
}

define draw<a>(s: sample-size, g: gen(a)): a {
  use g {generate} in
  generate(s)
}

define one-of<a>(g: gen(a), xs: &list(a)): gen(a) {
  Gen of {
    generate = {
      function (_) {
        let len = length(xs) in
        let index = random-in-range(0, sub-int(len, 1)) in
        let elem-or-none = nth(xs, index) in
        match elem-or-none {
        | Left(_) =>
          panic("one-of can't be used against the empty list")
        | Right(elem) =>
          elem
        }
      }
    },
    shrink = {
      function (_) {
        []
      }
    },
    viewer = g::viewer,
  }
}

define optional<a>(!g: gen(a)): gen(?a) {
  Gen of {
    generate = {
      function (size) {
        let dice = random-in-range(0, 1) in
        if eq-int(dice, 0) {
          none()
        } else {
          Right({
            let Gen of {generate} = !g in
            generate
          }(size))
        }
      }
    },
    shrink = {
      function (_) {
        []
      }
    },
    viewer = {
      as-show(core.unit.show.as-show, let Gen of {viewer} = !g in
      viewer)
    },
  }
}
