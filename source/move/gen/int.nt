import {
  core.int {abs-int},
  core.int.show,
  core.list {for-each},
  core.random {random-in-range-int},
  this.rule.gen {Gen, gen},
}

define _div-seq(k: int): list(int) {
  if eq-int(k, 0) {
    []
  } else {
    Cons(k, _div-seq(div-int(k, 2)))
  }
}

inline int-gen: gen(int) {
  Gen of {
    generate = {
      function (size) {
        let size = trunc-int-int32(size) in
        random-in-range-int(mul-int32(-1, size), size)
      }
    },
    shrink = {
      function (x) {
        let tmp =
          for-each(_div-seq(x), function (diff) {
            sub-int(x, diff)
          })
        in
        if lt-int(x, 0) {
          Cons(abs-int(x), tmp)
        } else {
          tmp
        }
      }
    },
    viewer = core.int.show.as-show,
  }
}

inline positive-int-gen: gen(int) {
  Gen of {
    generate = {
      function (size) {
        random-in-range-int(0, trunc-int-int32(size))
      }
    },
    shrink = {
      function (x) {
        for-each(_div-seq(x), function (diff) {
          sub-int(x, diff)
        })
      }
    },
    viewer = core.int.show.as-show,
  }
}

inline negative-int-gen: gen(int) {
  Gen of {
    generate = {
      function (size) {
        let size = trunc-int-int32(size) in
        mul-int(-1, random-in-range-int(0, size))
      }
    },
    shrink = {
      function (x) {
        for-each(_div-seq(x), function (diff) {
          sub-int(x, diff)
        })
      }
    },
    viewer = core.int.show.as-show,
  }
}
