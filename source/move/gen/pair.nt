import {
  core.list {append, product},
  core.pair.show,
  core.random {random-int},
  this.rule.gen {Gen, draw, gen},
}

inline pair-gen<a, b>(!g1: gen(a), !g2: gen(b)): gen(pair(a, b)) {
  let Gen of {shrink := shrink1, viewer := viewer1} = !g1;
  let Gen of {shrink := shrink2, viewer := viewer2} = !g2;
  Gen of {
    generate := {
      function (size: int) {
        let x-size = random-int(trunc-int-int32(size));
        let y-size = sub-int(size, x-size);
        let x = draw(x-size, !g1);
        let y = draw(y-size, !g2);
        Pair(x, y)
      }
    },
    shrink := {
      function (p) {
        let Pair(!x, !y) = p;
        let xs = shrink1(!x);
        let ys = shrink2(!y);
        let xys1 = product(xs, List[!y]);
        let xys2 = product(List[!x], ys);
        append(xys1, xys2)
      }
    },
    viewer := core.pair.show.as-show(viewer1, viewer2),
  }
}
