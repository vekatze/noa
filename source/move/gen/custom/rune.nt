import {
  core.eq.list {elem},
  core.list {filter},
  core.random {random-in-range-int, random-int},
  core.rune,
  core.rune.eq {as-eq},
  core.rune.ord {as-ord},
  core.rune.show,
  this.rule.gen {Gen, gen},
}

// [U+0000, U+007F]
define _random-1-byte-rune(value: int8): rune {
  magic cast(int8, rune, value)
}

// [U+0080, U+07FF]
define _random-2-byte-rune(value: int): rune {
  let mask-X = 0b_1100_0000_1000_0000;
  let mask-0 = 0b_0000_0111_1100_0000;
  let mask-1 = 0b_0000_0000_0011_1111;
  let value-0 = and-int(mask-0, value);
  let value-1 = and-int(mask-1, value);
  let value-0' = shl-int(value-0, 2);
  magic cast(int, rune, or-int(or-int(mask-X, value-0'), value-1))
}

// [U+0800, U+FFFF]
define _random-3-byte-rune(value: int): rune {
  let mask-X = 0b_1110_0000_1000_0000_1000_0000;
  let mask-0 = 0b_0000_0000_1111_0000_0000_0000;
  let mask-1 = 0b_0000_0000_0000_1111_1100_0000;
  let mask-2 = 0b_0000_0000_0000_0000_0011_1111;
  let value-0 = and-int(mask-0, value);
  let value-1 = and-int(mask-1, value);
  let value-2 = and-int(mask-2, value);
  let value-0' = shl-int(value-0, 4);
  let value-1' = shl-int(value-1, 2);
  magic cast(int, rune, or-int(or-int(or-int(mask-X, value-0'), value-1'), value-2))
}

// [U+10000, U+10FFFF]
define _random-4-byte-rune(value: int): rune {
  let mask-X: int = 0b_1111_0000_1000_0000_1000_0000_1000_0000;
  let mask-0: int = 0b_0000_0000_0001_1100_0000_0000_0000_0000;
  let mask-1: int = 0b_0000_0000_0000_0011_1111_0000_0000_0000;
  let mask-2: int = 0b_0000_0000_0000_0000_0000_1111_1100_0000;
  let mask-3: int = 0b_0000_0000_0000_0000_0000_0000_0011_1111;
  let value-0 = and-int(mask-0, value);
  let value-1 = and-int(mask-1, value);
  let value-2 = and-int(mask-2, value);
  let value-3 = and-int(mask-3, value);
  let value-0' = shl-int(value-0, 6);
  let value-1' = shl-int(value-1, 4);
  let value-2' = shl-int(value-2, 2);
  magic cast(int, rune, or-int(or-int(or-int(or-int(mask-X, value-0'), value-1'), value-2'), value-3))
}

define _gen-rune(_: int): rune {
  let rune-kind = random-int(4);
  if eq-int(rune-kind, 0) {
    let value = trunc-int-int8(random-int(0x80));
    _random-1-byte-rune(value)
  } else-if eq-int(rune-kind, 1) {
    let value = random-in-range-int(0x0080, 0x07ff);
    _random-2-byte-rune(value)
  } else-if eq-int(rune-kind, 2) {
    let value = random-in-range-int(0x0800, 0xffff);
    _random-3-byte-rune(value)
  } else {
    let value = random-in-range-int(0x10000, 0x10ffff);
    _random-4-byte-rune(value)
  }
}

define gen-rune-in-range(lower: int, upper: int): rune {
  // (inclusive range)
  let value = random-in-range-int(trunc-int-int32(lower), trunc-int-int32(upper));
  match core.rune.from-int(value) {
  | Right(r) =>
    r
  | Left(_) =>
    magic cast(int, rune, 0xefbfbe)
  }
}

inline _simple-runes: list(rune) {
  List[
    `b`,
    `a`,
    `B`,
    `A`,
  ]
}

inline _rune-eq-N: eq(&rune) {
  Eq of {
    equal := {
      function (x, y) {
        let Eq of {equal} = as-eq;
        equal(*x, *y)
      }
    },
  }
}

// inline _list-rune-ops: trope(rune) {
//   from-eq(_rune-eq-N)
// }
define _extract-candidates(c: rune): list(rune) {
  let cs = _simple-runes;
  let is-elem on c, cs = {
    // let Trope of {elem} = _list-rune-ops;
    pin k = core.rune.eq.as-eq;
    elem(k, cs, c)
  };
  let _ = cs;
  if is-elem {
    let pred =
      function (c') {
        let Ord of {compare} = as-ord;
        let b on c = compare(c, c');
        let _ = c;
        match b {
        | GT =>
          True
        | _ =>
          False
        }
      };
    filter(_simple-runes, pred)
  } else {
    List[`A`]
  }
}

data config {
| Config(
    rune-generator: ?() -> rune,
    rune-acceptor: (rune) -> bool,
  )
}

inline rune-gen(!c: config): gen(rune) {
  let Config of {rune-generator := !generator, rune-acceptor := !acceptor} = !c;
  Gen of {
    generate := {
      define loop(size) {
        let cand =
          match !generator {
          | Right(g) =>
            g()
          | Left(_) =>
            _gen-rune(size)
          };
        if !acceptor(cand) {
          cand
        } else {
          loop(size)
        }
      }
    },
    shrink := {
      function (v) {
        let cands = _extract-candidates(v);
        filter(cands, function (cand) {
          !acceptor(*cand)
        })
      }
    },
    viewer := core.rune.show.as-show,
  }
}
