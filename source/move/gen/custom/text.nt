import {
  core.control {grow},
  core.either {from-right},
  core.foreign {UINT32_MAX},
  core.int {max-int, min-int},
  core.list {filter, for-each-N},
  core.random {random-in-range-int},
  core.text {join, pack, unpack},
  this.move.gen.custom.rune,
  this.move.gen.list {_shrink-list},
  this.rule.gen {Gen, gen},
}

data config {
| Config(
    min-length: int,
    max-length: ?int,
    rune-generator: ?() -> rune,
    rune-acceptor: (rune) -> bool,
  )
}

inline text-gen(!c: config): gen(text) {
  let Config of {rune-generator, rune-acceptor, max-length, min-length} = !c;
  let rune-config =
    this.move.gen.custom.rune.Config of {
      rune-generator,
      rune-acceptor,
    };
  let !rune-gen = this.move.gen.custom.rune.rune-gen(rune-config);
  let Gen of {generate} = !rune-gen;
  Gen of {
    generate := {
      function (size: int) {
        let max-length = from-right(max-length, zext-int32-int(UINT32_MAX));
        let text-max-len = trunc-int-int32(min-int(size, max-length));
        let text-len = max-int(random-in-range-int(0, text-max-len), min-length);
        let tmp =
          grow(Nil, text-len, function (acc, _) {
            let r = generate(size);
            Cons(core.text.singleton(r), acc)
          });
        join(tmp)
      }
    },
    shrink := {
      function (t: text) {
        pin t = t;
        let rune-seq = unpack(t);
        pin rune-lists = _shrink-list(!rune-gen)(rune-seq);
        let result = for-each-N(rune-lists, pack);
        filter(result, function (t) {
          let len = core.text.length(t);
          ge-int(len, min-length)
        })
      }
    },
  }
}
