import {
  core.control {grow},
  core.list {append, concat, for-each, is-empty, length, reverse},
  core.random {random-int},
  this.rule.gen {Gen, draw, gen},
}

inline _shrink-one<a>(!shrink: (a) -> list(a)): (list(a)) -> list(list(a)) {
  define self(xs: list(a)) {
    match xs {
    | Nil =>
      Nil
    | Cons(!x, !xs) =>
      let former =
        for-each(!shrink(!x), function (x') {
          Cons(x', !xs)
        });
      let tmp = self(!xs);
      let latter =
        for-each(tmp, function (xs') {
          Cons(!x, xs')
        });
      append(former, latter)
    }
  }
}

define _split<a>(n: int, xs: list(a), head-acc: list(a)): pair(list(a), list(a)) {
  if le-int(n, 0) {
    Pair(reverse(head-acc), xs)
  } else {
    match xs {
    | Nil =>
      Pair(head-acc, Nil)
    | Cons(y, ys) =>
      _split(sub-int(n, 1), ys, Cons(y, head-acc))
    }
  }
}

define split<a>(n: int, xs: list(a)): pair(list(a), list(a)) {
  _split(n, xs, Nil)
}

define _removes<a>(k: int, n: int, xs: list(a)): list(list(a)) {
  if gt-int(k, n) {
    Nil
  } else {
    let Pair(xs1, !xs2) = split(k, xs);
    let b on !xs2 = is-empty(!xs2);
    if b {
      List[List[]]
    } else {
      let tmp = _removes(k, sub-int(n, k), !xs2);
      let rest =
        for-each(tmp, function (xs2') {
          append(xs1, xs2')
        });
      Cons(!xs2, rest)
    }
  }
}

define _div-seq(k: int): list(int) {
  if eq-int(k, 0) {
    Nil
  } else {
    Cons(k, _div-seq(div-int(k, 2)))
  }
}

inline _shrink-list<a>(g: gen(a)): (list(a)) -> list(list(a)) {
  function (!xs) {
    let n on !xs = length(!xs);
    let xsss =
      for-each(_div-seq(n), function (k) {
        _removes(k, n, !xs)
      });
    let Gen of {shrink} = g;
    let yss = _shrink-one(shrink)(!xs);
    append(concat(xsss), yss)
  }
}

inline list-gen<a>(!g: gen(a)): gen(list(a)) {
  Gen of {
    generate := {
      function (size) {
        let trunc-size = trunc-int-int32(size);
        grow(Nil, size, function (acc, _) {
          let elem = draw(random-int(trunc-size), !g);
          Cons(elem, acc)
        })
      }
    },
    shrink := _shrink-list(!g),
  }
}
