import {
  core.debug {vet-doc},
  core.doc {Chunk, Group, Nest, Seq, doc},
  core.doc.chunk {Chunk-Choose, Chunk-Empty, Chunk-Join, Chunk-Line, Chunk-Style, Chunk-Style-N, chunk},
  core.doc.show {show-doc},
  core.text {replace},
  this.gen {Gen, draw, gen},
  this.noa-kit {_Noa-Kit, _compute-size, noa-kit},
  this.private.utils {_flush, _print-blue-bold, _print-green-bold, _print-red-bold, _write, _write-line},
}

data _result(a) {
| _OK
| _Failure(
    iteration: int,
    value: a,
    predicate: (a) -> bool,
    g: gen(a),
    verbose: bool,
  )
}

define _simplify-chunk(x: chunk): chunk {
  match x {
  | Chunk-Line =>
    Chunk-Empty
  | Chunk-Join(left, right) =>
    Chunk-Join(_simplify-chunk(left), _simplify-chunk(right))
  | Chunk-Choose(horizontal, _) =>
    horizontal
  | Chunk-Style(_) =>
    Chunk-Empty
  | Chunk-Style-N(_) =>
    Chunk-Empty
  | x =>
    x
  }
}

define _simplify-doc(d: doc): doc {
  match d {
  | Chunk(c) =>
    Chunk(_simplify-chunk(c))
  | Seq(d1, d2) =>
    Seq(_simplify-doc(d1), _simplify-doc(d2))
  | Nest(i, d) =>
    Nest(i, _simplify-doc(d))
  | Group(d) =>
    Group(_simplify-doc(d))
  }
}

define _max-ribbon-length: int {
  32
}

define _find-refutation<a>(k: &noa-kit, !predicate: (a) -> bool, cands: list(a), !g: gen(a)): ?a {
  tie _Noa-Kit of {verbose} = k;
  match cands {
  | Nil =>
    when *verbose {
      _print-blue-bold(k, "    ✓ Stop\n")
    };
    none
  | Cons(!cand, rest) =>
    if !predicate(!cand) {
      when *verbose {
        _print-blue-bold(k, "      ✓ ");
        pin !cand = !cand;
        pin d = _simplify-doc(vet-doc(!cand));
        pin t = show-doc(d, _max-ribbon-length);
        _write-line(k, t);
      };
      _find-refutation(k, !predicate, rest, !g)
    } else {
      when *verbose {
        _print-red-bold(k, "      ✗ ");
        pin !cand = !cand;
        pin d = _simplify-doc(vet-doc(!cand));
        pin t = show-doc(d, _max-ribbon-length);
        _print-red-bold(k, t);
        _write(k, "\n");
      };
      Right(!cand)
    }
  }
}

define _repeat-shrink<a>(k: &noa-kit, !cand: a, !predicate: (a) -> bool, !g: gen(a)): a {
  let Gen of {shrink} = !g;
  let alts = shrink(!cand);
  match _find-refutation(k, !predicate, alts, !g) {
  | Left(_) =>
    !cand
  | Right(smaller-cand) =>
    _repeat-shrink(k, smaller-cand, !predicate, !g)
  }
}

inline _run-tests<a>(k: &noa-kit, num-of-tests: int, !f: (int) -> _result(a)): either(pair(int, a), unit) {
  let helper =
    define self(iteration: int): either(pair(int, a), unit) {
      if ge-int(iteration, num-of-tests) {
        Right(Unit)
      } else {
        match !f(iteration) {
        | _OK =>
          self(add-int(iteration, 1))
        | _Failure of {iteration, value, predicate, g, verbose} =>
          when verbose {
            _print-blue-bold(k, "    ↻ Shrink:\n")
          };
          let value' = _repeat-shrink(k, value, predicate, g);
          Left(Pair(iteration, value'))
        }
      }
    };
  helper(0)
}

define check<a>(k: &noa-kit, label: &text, !g: gen(a), !predicate: (a) -> bool): unit {
  tie _Noa-Kit of {verbose, num-of-tests} = k;
  let result = {
    when *verbose {
      _print-blue-bold(k, "? Check: ");
      _write-line(k, label);
    };
    _run-tests(k, *num-of-tests, function (i) {
      let size = _compute-size(k, i);
      let !value = draw(size, !g);
      if !predicate(!value) {
        when *verbose {
          _print-blue-bold(k, "  ✓ ");
          pin !cand = !value;
          pin d = _simplify-doc(vet-doc(!cand));
          pin t = show-doc(d, _max-ribbon-length);
          _write-line(k, t);
        };
        _OK
      } else {
        when *verbose {
          _print-red-bold(k, "  ✗ ");
          pin !cand = !value;
          pin d = _simplify-doc(vet-doc(!cand));
          pin t = show-doc(d, _max-ribbon-length);
          _print-red-bold(k, t);
          _write(k, "\n");
        };
        _Failure(i, !value, !predicate, !g, *verbose)
      }
    })
  };
  match result {
  | Right(Unit) =>
    _print-green-bold(k, "✓ Pass: ");
    _write-line(k, label)
  | Left(Pair(_, counterexample)) =>
    _print-red-bold(k, "✗ Fail: ");
    _write-line(k, label);
    _print-red-bold(k, "  → ");
    pin !cand = counterexample;
    pin d = _simplify-doc(vet-doc(!cand));
    pin txt = show-doc(d, _max-ribbon-length);
    pin txt' = replace(txt, "\n", *"\n    ");
    _print-red-bold(k, txt');
    _write(k, "\n");
  };
  _flush(k)
}
