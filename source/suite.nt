import {
  core.text {replace},
  this.gen {draw, gen},
  this.utils {_print-blue-bold, _print-green-bold, _print-red-bold, _printf-red-bold},
}

data config {
| Config(
    num-of-tests: int,
    max-size: int,
    verbose: bool,
  )
}

define _compute-size(c: config, iteration: int): int {
  use c {num-of-tests, max-size} in
  let max-size' = sitofp-int-float(max-size) in
  let iteration' = sitofp-int-float(iteration) in
  let num-of-tests' = sitofp-int-float(num-of-tests) in
  let size = mul-float(max-size', div-float(iteration', num-of-tests')) in
  fptosi-float-int(size)
}

data _result(a) {
| _OK
| _Failure(
    iteration: int,
    value: a,
    property: (a) -> bool,
    g: gen(a),
    verbose: bool,
  )
}

define _find-refutation<a>(!property: (a) -> bool, cands: list(a), !g: gen(a), verbose: bool): ?a {
  match cands {
  | Nil =>
    when verbose {
      _print-blue-bold("    ✔ Stop\n")
    };
    none()
  | Cons(!cand, rest) =>
    if !property(!cand) {
      when verbose {
        _print-blue-bold("      ✔ ");
        printf("{}\n", [!g::viewer::show(!cand)])
      };
      _find-refutation(!property, rest, !g, verbose)
    } else {
      when verbose {
        _print-red-bold("      ✘ ");
        _printf-red-bold("{}\n", [!g::viewer::show(!cand)])
      };
      Right(!cand)
    }
  }
}

define _repeat-shrink<a>(!cand: a, !property: (a) -> bool, !g: gen(a), verbose: bool): a {
  let alts = !g::shrink(!cand) in
  match _find-refutation(!property, alts, !g, verbose) {
  | Left(_) =>
    !cand
  | Right(smaller-cand) =>
    _repeat-shrink(smaller-cand, !property, !g, verbose)
  }
}

inline _run-tests<a>(num-of-tests: int, !f: (int) -> _result(a)): either(pair(int, a), unit) {
  let helper =
    define self(iteration: int): either(pair(int, a), unit) {
      if ge-int(iteration, num-of-tests) {
        Right(Unit)
      } else {
        match !f(iteration) {
        | _OK =>
          self(add-int(iteration, 1))
        | _Failure of {iteration, value, property, g, verbose} =>
          when verbose {
            _print-blue-bold("    ↻ Shrink:\n")
          };
          let value' = _repeat-shrink(value, property, g, verbose) in
          Left(Pair(iteration, value'))
        }
      }
    }
  in
  helper(0)
}

inline _check(!c: config): <a>(label: &text, !g: gen(a), property: (a) -> bool) -> unit {
  function <a>(label: &text, !g: gen(a), !property: (a) -> bool): unit {
    use !g {viewer} in
    let result =
      when !c::verbose {
        _print-blue-bold("? Check: ");
        printf("{}\n", [*label])
      };
      _run-tests(!c::num-of-tests, function (i) {
        let size = _compute-size(!c, i) in
        let !value = draw(size, !g) in
        if !property(!value) {
          when !c::verbose {
            _print-blue-bold("  ✔ ");
            printf("{}\n", [!g::viewer::show(!value)])
          };
          _OK
        } else {
          when !c::verbose {
            _print-red-bold("  ✘ ");
            _printf-red-bold("{}\n", [!g::viewer::show(!value)])
          };
          _Failure(i, !value, !property, !g, !c::verbose)
        }
      })
    in
    match result {
    | Right(Unit) =>
      _print-green-bold("✔ Pass: ");
      printf("{}\n", [*label])
    | Left(Pair(_, counterexample)) =>
      _print-red-bold("✘ Fail: ");
      printf("{}\n", [*label]);
      _print-red-bold("  → ");
      let txt = viewer::show(counterexample) in
      let txt' on txt = replace(txt, "\n", *"\n    ") in
      let _ = txt in
      _printf-red-bold("{}\n", [txt'])
    }
  }
}

data trope {
| Trope(
    check: <a>(name: &text, g: gen(a), property: (a) -> bool) -> unit,
  )
}

inline new-suite(c: config): trope {
  Trope of {
    check = _check(c),
  }
}

constant noa: trope {
  new-suite(
    Config of {
      num-of-tests = 100,
      max-size = 100,
      verbose = False,
    },
  )
}

constant noa-verbose: trope {
  new-suite(
    Config of {
      num-of-tests = 100,
      max-size = 100,
      verbose = True,
    },
  )
}
