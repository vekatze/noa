import {
  core.control {loop},
  core.list {for-each, is-empty},
  core.list.show,
  core.random {random},
  this.gen {Gen, draw, gen},
}

inline _shrink-one<a>(shrink: (a) -> list(a)): (list(a)) -> list(list(a)) {
  define self(xs: list(a)) {
    match xs {
    | Nil =>
      []
    | Cons(x, xs) =>
      let former =
        for-each(shrink(x), function (x') {
          Cons(x', xs)
        })
      in
      let tmp = self(xs) in
      let latter =
        for-each(tmp, function (xs') {
          Cons(x, xs')
        })
      in
      let _ = tmp in
      append(former, latter)
    }
  }
}

define _split<a>(n: int, xs: list(a), head-acc: list(a)): pair(list(a), list(a)) {
  if le-int(n, 0) {
    Pair(reverse(head-acc), xs)
  } else {
    match xs {
    | Nil =>
      Pair(head-acc, Nil)
    | Cons(y, ys) =>
      _split(sub-int(n, 1), ys, Cons(y, head-acc))
    }
  }
}

define split<a>(n: int, xs: list(a)): pair(list(a), list(a)) {
  _split(n, xs, [])
}

define _removes<a>(k: int, n: int, xs: list(a)): list(list(a)) {
  if gt-int(k, n) {
    []
  } else {
    let Pair(xs1, xs2) = split(k, xs) in
    let _ = xs in
    let b on xs2 = is-empty(xs2) in
    if b {
      [[]]
    } else {
      let foo = _removes(k, sub-int(n, k), xs2) in
      let rest =
        for-each(foo, function (xs2') {
          append(xs1, xs2')
        })
      in
      Cons(xs2, rest)
    }
  }
}

define _div-seq(k: int): list(int) {
  if eq-int(k, 0) {
    []
  } else {
    Cons(k, _div-seq(div-int(k, 2)))
  }
}

inline _shrink-list<a>(g: gen(a)): (list(a)) -> list(list(a)) {
  function (xs) {
    let n on xs = length(xs) in
    let xsss =
      for-each(_div-seq(n), function (k) {
        _removes(k, n, xs)
      })
    in
    let yss = _shrink-one(g::shrink)(xs) in
    append(concat(xsss), yss)
  }
}

inline lists<a>(g: gen(a)): gen(list(a)) {
  Gen of {
    generate = {
      function (size) {
        loop(size, [], function (acc, _) {
          let elem = draw(random(size), g) in
          Cons(elem, acc)
        })
      }
    },
    shrink = _shrink-list(g),
    viewer = core.list.show.as-show(g::viewer),
  }
}
